#!/usr/bin/env ruby

BIN_NAME    = File.basename(__FILE__)
BIN_PATH    = File.dirname(__FILE__)
BIN         = File.join( File.expand_path("../ext/mtl", BIN_PATH), BIN_NAME)
FILE        = ARGV.first

FILTER      = ENV['FILTER'] || "| grep -v 'bytes' | grep -e'[a-z]'"
MERGE       = File.join(BIN_PATH, 'mtl_merge')
TMP         = ENV['TMP'] || '.tmp.mtl'
OUT         = ENV['OUT'] || "bytecode.bin"

HOST        = ENV['HOST']
REMOTE_PATH = ENV['REMOTE'] || "~/"
REMOTE_BIN  = ENV['REMOTE_BIN']

unless FILE
  puts "usage: #{File.basename(__FILE__)} [filename]"
  abort
end

# merge
`TMP='#{TMP}' #{MERGE} #{FILE}`

# compile
out = nil
if File.exists?(BIN)
  out = `#{BIN} -s #{FILE} #{OUT} 2>&1 #{FILTER}`
else
  print "local binary not found"
end

if HOST
  puts " - falling back to remote"
  `scp #{TMP} #{HOST}:#{REMOTE_PATH}#{TMP}`
  out = `ssh #{HOST} "cd #{REMOTE_PATH} && rm -f #{TMP}.bin && #{REMOTE_BIN}#{BIN_NAME} -s #{TMP} #{TMP}.bin 2>&1 #{FILTER}"`
  `scp #{HOST}:#{REMOTE_PATH}#{TMP}.bin #{OUT}`
end

puts out
`rm #{TMP}`
