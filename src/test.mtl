proto main 0;;

#include "lib/util"
#include "pinnab"

#include "test/helper"

//-------------------- MAIN
fun main=
  //include "test/native"
  //include "test/pinnab"

  //let test "tl" -> t in
  //(
  //  assert_equalS "0"     tl "90";
  //  assert_equalS "09"    tl "909";
  //0);

  let test "strcmp" -> t in
  (
    assert_equalI 0 strcmp "" "";
    assert_equalI 0 strcmp "T" "T";
    assert_equalI -1 strcmp "T" "To";
    assert_equalI -1 strcmp "T" "t";
    assert_equalI 1 strcmp "t" "T";
    assert_equalI 1 strcmp "To" "Tb";
  0);

  let test "itoa" -> t in
  (
    assert_equalS "0"     itoa 0;
    assert_equalS "51"    itoa 51;
    assert_equalS "255"   itoa 255;
    assert_equalS "25500" itoa 25500;
  0);

  let test "itoh" -> t in
  (
    assert_equalS "0"     itoh 0;
    assert_equalS "33"    itoh 51; // 51 -> hex == 33
    assert_equalS "ff"    itoh 255; // 255 -> hex == ff
    assert_equalS "3e517" itoh 255255; // 255255 -> hex == 3e517
  0);

  let test "webmac" -> t in
  (
    assert_equalS "0100"   webmac "\1\0";
    assert_equalS "0a00"  webmac "\10\0";
    assert_equalS "00ff"   webmac "\0\255";
    assert_equalS "ff00"   webmac "\255\0";
  0);

  // let test "ILcmplen" -> t in
  // (
  //   assert_equalI 3 ILcmplen  48::49::50::nil 48::49::50::nil;
  //   assert_equalI 1 ILcmplen  48::49::50::nil 48::50::50::nil;
  //   assert_equalI 1 ILcmplen  48::nil 48::49::nil;
  //   assert_equalI 0 ILcmplen  48::49::50::nil 49::49::nil;
  // 0);
//
  // let test "ILcmp" -> t in
  // (
  //   assert_equal ILcmp  48::49::50::nil 48::49::50::nil;
  //   assert_not_equal ILcmp  48::49::50::nil 48::50::50::nil;
  //   assert_not_equal ILcmp  48::49::50::nil 48::49::nil;
  //   assert_not_equal ILcmp  48::49::nil 48::49::50::nil;
  // 0);
//
  // let test "SLcmplen" -> t in
  // (
  //   assert_equalI 3 SLcmplen  "48"::"49"::"50"::nil "48"::"49"::"50"::nil;
  //   assert_equalI 1 SLcmplen  "48"::"49"::"50"::nil "48"::"59"::"50"::nil;
  //   assert_equalI 1 SLcmplen  "48"::nil "48"::"49"::nil;
  //   assert_equalI 0 SLcmplen  "48"::"49"::"50"::nil "49"::"49"::nil;
  // 0);
//
  // let test "SLcmp" -> t in
  // (
  //   assert_equal SLcmp      "48"::"49"::nil "48"::"49"::nil;
  //   assert_not_equal SLcmp  "48"::"49"::nil "48"::"49"::"50"::nil;
  //   assert_not_equal SLcmp  "48"::"49"::"51"::nil "48"::"49"::"50"::nil
  // );

  let test "StoI3" -> t in
  (
    assert_equalI 0        StoI3 "\0\0\0dummy" ;
    assert_equalI 0        StoI3 "\0\0\0" ;
    assert_equalI 255      StoI3 "\0\0\255";
    assert_equalI 65280    StoI3 "\0\255\0";
    assert_equalI 6579300  StoI3 "\100\100\100";
    assert_equalI 16711680 StoI3 "\255\0\0";
    assert_equalI 16777215 StoI3 "\255\255\255";
  0);

  let test "StoI2" -> t in
  (
    assert_equalI 0        StoI2 "\0\0\0" ;
    assert_equalI 0        StoI2 "\0\0\255";
    assert_equalI 255      StoI2 "\0\255\0";
  0);

  let test "StoI" -> t in
  (
    assert_equalI 0        StoI "\0\0\0" ;
    assert_equalI 255      StoI "\0\0\255";
    assert_equalI 65280    StoI "\0\255\0";
  0);

  let test "str_find_end" -> t in
  (
    assert_equalI nil      str_find_end "" ;
    assert_equalI 0        str_find_end "\255\0\0" ;
    assert_equalI 2        str_find_end "AB\255";
    assert_equalI 10       str_find_end "0123456789\255";
  0);

  let test "find RIFID id" -> t in
  (
    assert_equalI 0   strstr "\208\2\26\1\1\1\1\1" "\208\2\26" 0;
    assert_equalI 1   strstr "\1\208\2\26\1\1\1\1" "\208\2\26" 0;
    assert_equalI nil strstr "\1\208\1\26\1\1\1\1" "\208\2\26" 0;
    //assert_equalI nil strstr "\1\208\1\26\1\1\1\1" 0xd0021a 0;
  0);

  let test "COtoI" -> t in
  (
    assert_equalI 0    COtoI 0 0 0;
    assert_equalI 51   COtoI 1 2 3;
    assert_equalI 121  COtoI 3 2 1;
    assert_equalI 215  COtoI 5 5 5;
  0);

  let test "ItoCO" -> t in
  (
    assert_equalI 0x000000  ItoCO nil;
    assert_equalI 0x000000  ItoCO 0;
    assert_equalI 0x5a82aa  ItoCO 51;
    assert_equalI 0xaa825a  ItoCO 121;
    assert_equalI 0xFFFFFF  ItoCO 215;
    assert_equalI 0xFFFFFF  ItoCO 255;
  0);

  let test "BintoI3" -> t in
  (
    assert_equalI 0         BintoI3 "\0\0\0" 0;
    assert_equalI 255       BintoI3 "\0\0\255" 0;
    assert_equalI 65535     BintoI3 "\0\255\255" 0;
    assert_equalI 16776959  BintoI3 "\0\255\255" 1;
  0);

  let test "parseResponse" -> t in
  (
    assert_nil parseResponse "\127";
    assert_nil parseResponse "\122";
    assert_equalTL [11 "1"]::[10 "123"]::nil parseResponse "\127\10\0\0\3\49\50\51\11\0\0\1\49";
    assert_equalTL [11 "1"]::[10 "123"]::nil parseResponse "\127\10\0\0\3\49\50\51\11\0\0\2\49";
    assert_equalTL [51 "\2\49"]::[10 "12"]::nil parseResponse "\127\10\0\0\2\49\50\51\11\0\0\2\49";
    //TODO check last ending byte
  0);

  set buffers = tabnew {} 5;
  let test "fillBuffer" -> t in
  (
    fillBuffer 0 "\12\255";
    let buffers.0 -> buffer in
    (
      assert_equalI 12 buffer.0;
      assert_equalI 255 buffer.1;
      assert_equalI nil buffer.2;
      assert_equalI 2 tablen buffer;
    0);

    fillBuffer 1 "1234567890123456789012345678901234567890\255";
    let buffers.1 -> buffer in
    (
      assert_equalI StoI "1" buffer.30;
      assert_equalI 255 buffer.40;
      assert_equalI 41 tablen buffer;
    0);

    fillBuffer 3 "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    let buffers.3 -> buffer in
    assert_equalI 300 tablen buffer;
  0);

  exit;
0;;
