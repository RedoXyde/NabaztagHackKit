// VLISP - Jan 2012 06
// Nabaztag Code cleanup

proto main 0;;

#include "lib/var"
#include "lib/util"
#include "lib/cfg"
#include "lib/arp"
#include "lib/udp"
#include "lib/tcp"
#include "lib/dns"
#include "lib/http"
#include "lib/dhcp"
#include "pinnab"
#include "lib/wifi"

//-------------------- RFID
fun playerUrl tag=
  strcatlist confGetServerUrl::"/players/"::(webmac tag)::".jsp"::nil;;

fun eventUrl tag=
  strcatlist confGetServerUrl::"/events.jsp"::"?event[data]="::tag::nil;;

fun debugUrl tag=
  strcatlist confGetServerUrl::"/debug.jsp?t="::tag::nil;;

fun _cbdummyhttp http res=
  0
;;

fun evalTrame res=
  let parseResponse httpgetcontent res -> bufferlist in
    if bufferlist != nil then
    (
      for l = bufferlist; l != nil; tl l do
      (
        let hd l -> [code val] in
        if code == 1 then
        (
          0
        )
        else if code == 9 then
        (
          exit //reboot
        )
        // led buffers: short 20-24 loop 25-29; 3Byte: short 30-34 loop 35-39
        else if code >= 20 && code <= 39 then
        (
          let code % 10 -> index in
          let 2 * (code / 30) + 1 -> step in
          let index / 5 -> loop in
          _bufferFill index step loop val;
          0
        )
        // ear buffers: short 40-41, loop 42-43
        else if code >= 40 && code <= 43 then
        (
          let code % 10 -> index in
          let 1 -> step in
          let index / 2 -> loop in
          _bufferFill index+10 step loop val;
          0
        )
      )
    )
;;

fun _cbHttp http res=
  evalTrame res;
  0
;;

//--------- RFID
const RFID_CHECK_FQ = 500;; //ms MIN 50ms
const RFID_STOP_BYTE = 0xFF;;
const RFID_ID_START = "\208\2\26";; // 0xd0 0x02 0x1a
const RFID_ID_FALSE = "\0\0\0\0\0\0\0\0\v";;
const RFID_ID_ERROR = "\69\114\114\111\114\0\0\0\v";; // 0x45 72 72 6f 72 00 00 00

var rfid_last_check = 0;;
var data = "";;

fun checkRFID=
  if ((time_ms - rfid_last_check) > RFID_CHECK_FQ) then
  (
    let rfidGet -> rfid in
    if (rfid != nil) then
    (
      if ((strstr rfid RFID_ID_START 0) == 0) then
      (
        httprequest "PUT" playerUrl rfid "" #_cbHttp HTTP_NORMAL;
        0
      )
      else if ((strstr rfid RFID_ID_FALSE 0) == 0) then
      (
        0
      )
      else
      (
        let strlen rfid -> len in //usually that's 8
        for index = 0; index < len; index + 1 do
        (
          let strget rfid index -> data_byte in
          (
            if (data_byte != RFID_STOP_BYTE) then
              set data = strcat data ctoh data_byte
            else if ((strlen data) > 0) then
            (
              httprequest "POST" eventUrl data "" #_cbHttp HTTP_NORMAL;
              set data = ""
            )
          )
        );
        0
      )
    );
    //all done
    set rfid_last_check = time_ms
  );
0;;

//--------- LED
const LED_CHECK_FQ = 500;; //ms MIN 50ms
var led_last_check = 0;;
fun setLeds=
   //LED_CHECK_FQ
  let (button3 + 1) * 3 -> led_check_fq in
  if ((time_ms - led_last_check) > led_check_fq) then
  (
    for index = 0; index < 5; index + 1 do
    (
      let colorBufferRead index+5 -> loopColor in
      let colorBufferRead index -> color in
      (
        if color == nil then set color = loopColor;
        if color == nil then set color = 0;
        led index color
      )
    );
    set led_last_check = time_ms
  )
;;

//--------- EAR
const EAR_CHECK_FQ = 500;; //ms MIN 50ms
var ear_last_check = 0;;
var globalEarIndex = 0;;
fun setEars=
  if ((time_ms - ear_last_check) > EAR_CHECK_FQ) then
  (
    for index = 0; index < 2; index + 1 do
    (
      let earBufferRead index+10 -> earPos in
      (
        if earPos == nil then set earPos = earBufferRead index+10+2;
        if earPos == nil then set earPos = 0;
        motorset index earPos
      )
    );
    set ear_last_check = time_ms
  )
;;

//--------- Button
const BUTTON_REBOOT = 30;; //ms MIN 50ms
var button_pressed = 0;;
fun checkButton=
  if (button2 > 0) then
  (
    set button_pressed = button_pressed + 1;
    if (button_pressed == 1) then
    (
      let itoa motorget 0 -> m0 in
      let itoa motorget 1 -> m1 in
      let strcatlist m0::" - "::m1::nil -> data in
      httprequest "GET" debugUrl data "" #_cbHttp HTTP_NORMAL;
      0
    ) else if (button_pressed > BUTTON_REBOOT) then
    (
      buffersFill 0 4 "\0\255\0\255\0\255\255\255";
      0
      //buffersFill3 0 4 "\0\0\0\255\255\255\255\0\0\0\255\255\255\0\0\0\255\255\255\255\255\255\255\255\255"
    )
  )
  //reboot only when button not pressed, otherwise we get into setup mode
  else if (button_pressed > BUTTON_REBOOT) then
  (
    exit
  )
  else (
    set button_pressed = 0
  )
;;

//--------- EAR
var earPosL = 0;;
var earPosR = 0;;
fun checkEars=
  if(earPosL != motorget 0 || earPosR != motorget 1) then
  (
    let itoa motorget 0 -> m0 in
    let itoa motorget 1 -> m1 in
    let (strcatlist m0::"-"::m1::nil) -> data in
    httprequest "GET" debugUrl data "" #_cbHttp HTTP_NORMAL;
    set earPosL = motorget 0;
    set earPosR = motorget 1
  )
;;

//-------------------- LOOP
fun loop=
  wifiRun;
  wifiCheck;

  setLeds;
  setEars;
  //checkRFID;
  checkButton;
  //checkEars;
0;;

//-------------------- MAIN
fun main=
  confInit;
  wifiInit 0;
  buffersInit 14;

  loopcb #loop; // 20 p. second

  netstart;
  startdnsclient;

  sndVol 0;
  srand time_ms;
0;;
