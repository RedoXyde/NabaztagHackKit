// VLISP - Jan 2012 06
// Nabaztag Code cleanup

proto main 0;;

#include "lib/var"
#include "lib/util"
#include "lib/cfg"
#include "lib/arp"
#include "lib/udp"
#include "lib/tcp"
#include "lib/dns"
#include "lib/http"
#include "lib/dhcp"
#include "pinnab"
#include "lib/wifi"

//-------------------- RFID
fun playerUrl tag=
  strcatlist confGetServerUrl::"/players/"::(webmac tag)::".jsp"::nil;;

fun eventUrl tag=
  strcatlist confGetServerUrl::"/events.jsp"::"?event[data]="::tag::nil;;

fun debugUrl tag=
  strcatlist confGetServerUrl::"/debug.jsp?t="::tag::nil;;

fun _cbdummyhttp http res=
  0
;;

fun evalTrame res=
  let parseResponse httpgetcontent res -> bufferlist in
    if bufferlist != nil then
    (
      for l = bufferlist; l != nil; tl l do
      (
        let hd l -> [code val] in
        if code == 1 then
        (
          0
        )
        else if code == 9 then
        (
          exit //reboot
        )
        // short buffers 20-24 && loop buffers  25 - 29
        else if code >= 20 && code <= 29 then
        (
          fillBuffer (code-20) val
        )
        else
        (
          httprequest "GET" debugUrl itoa code nil #_cbdummyhttp HTTP_NORMAL;
          0
        )
      )
    )
;;

fun _cbrfidhttp http res=
  evalTrame res;
  0
;;

//--------- RFID
const RFID_CHECK_FQ = 500;; //ms MIN 50ms
const RFID_STOP_BYTE = 0xFF;;
const RFID_ID_START = "\208\2\26";; // 0xd0 0x02 0x1a
const RFID_ID_FALSE = "\0\0\0\0\0\0\0\0\v";;
const RFID_ID_ERROR = "\69\114\114\111\114\0\0\0\v";; // 0x45 72 72 6f 72 00 00 00

var rfid_last_check = 0;;
var data = "";;

fun controlrfid=
  if ((time_ms - rfid_last_check) > RFID_CHECK_FQ) then
  (
    let rfidGet -> rfid in
    if (rfid != nil) then
    (
      //set_led 0 rfid;
      // httprequest "GET" debugUrl rfid nil #_cbrfidhttp HTTP_NORMAL;

      if ((strstr rfid RFID_ID_START 0) == 0) then
      (
        httprequest "PUT" playerUrl rfid "" #_cbrfidhttp HTTP_NORMAL;
        0
      )
      else if ((strstr rfid RFID_ID_FALSE 0) == 0) then
      (
        0
      )
      else
      (
        let strlen rfid -> len in //usually that's 8
        for index = 0; index < len; index + 1 do
        (
          let strget rfid index -> data_byte in
          (
            if (data_byte != RFID_STOP_BYTE) then
              set data = strcat data ctoh data_byte
            else if ((strlen data) > 0) then
            (
              httprequest "POST" eventUrl data "" #_cbrfidhttp HTTP_NORMAL;
              set data = ""
            )
          )
        );
        0
      )
    );
    //all done
    set rfid_last_check = time_ms
  );
0;;

//--------- LED
const LED_CHECK_FQ = 500;; //ms MIN 50ms
var led_last_check = 0;;
var globalIndex = 0;;

fun setLeds=
   //LED_CHECK_FQ
  let (button3 + 1) * 3 -> led_check_fq in
  if ((time_ms - led_last_check) > led_check_fq) then
  (
    for index = 0; index < 5; index + 1 do
    (
      let buffers.index -> buffer in
      led index ItoCO buffer.(globalIndex % tablen buffer)
    );
    set globalIndex = globalIndex + 1;
    set led_last_check = time_ms
  )
;;

//--------- LED
const BUTTON_CHECK_FQ = 500;; //ms MIN 50ms
var button_last_check = 0;;
fun checkButton=
  if ((time_ms - button_last_check) > BUTTON_CHECK_FQ) then
  (
    if (button2 > 0) then
    (
      httprequest "GET" debugUrl "" "" #_cbrfidhttp HTTP_NORMAL
    );
    set button_last_check = time_ms
  )
;;

//-------------------- LOOP
fun loop=
  wifiRun;
  wifiCheck;

  controlrfid;
  setLeds;
  checkButton;
0;;

//-------------------- MAIN
fun main=
  confInit;
  wifiInit 0;

  loopcb #loop; // 20 p. second

  netstart;
  startdnsclient;
  set buffers = tabnew {} 10;
  srand time_ms;
0;;
